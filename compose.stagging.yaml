services:
  backend:
    build:
      context: ./backend
    container_name: backend-stagging
    command: >
      sh -c "python manage.py collectstatic --noinput 
      && python manage.py migrate
      && daphne main.asgi:application -b 0.0.0.0 -p 8000"
    restart: unless-stopped
    expose:
      - 8000
    # ports:
    #   - 8000:8000
    volumes:
      - ./backend:/app
    env_file:
      - .env_file/stagging.env
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    container_name: db-stagging
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres #TODO: make sure to use your prefered db name
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - "6379:6379"

  celery:
    build:
      context: ./backend
    container_name: celery
    command: celery -A main worker -l INFO
    volumes:
      - ./backend:/app
    env_file:
      - .env_file/stagging.env
    depends_on:
      - redis

  celery_beat:
    build:
      context: ./backend
    container_name: celery_beat
    command: celery -A main beat -l INFO
    volumes:
      - ./backend:/app
    env_file:
      - .env_file/stagging.env
    depends_on:
      - redis
  nginx:
    # build:
    #   context: ./nginx
    #   dockerfile: Dockerfile
    image: nginx:latest
    container_name: nginx-stagging
    restart: unless-stopped
    ports:
      - 80:80
      # - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount the base configuration
      - ./nginx/nginx-stagging.conf:/etc/nginx/conf.d/default.conf  # Mount the staging configuration
      # - ./nginx/certs/:/etc/nginx/certs/  # Mount the directory for SSL certificates
      - ./backend/staticfiles:/app/staticfiles
      # - ./backend/mediafiles:/app/mediafiles
      # - certbot-etc:/etc/letsencrypt
      # - certbot-var:/var/lib/letsencrypt
      
    depends_on:
      backend:
        condition: service_started
volumes:
  db-data:
secrets:
  db-password:
    file: .secrets/db/password-stagging.txt
networks:
  default:
    driver: bridge
    name: oysirs-stagging-network
